// <auto-generated />
using System;
using Ent_DataAnnotation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ent_DataAnnotation.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ent_DataAnnotation.Model.Brand", b =>
                {
                    b.Property<int>("brand_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("brand_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("brand_id");

                    b.ToTable("brands", "production");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("category_id");

                    b.ToTable("categories", "production");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Zip_code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("city")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("first_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("last_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("state")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("customer_id");

                    b.ToTable("customers", "sales");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Order", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("order_date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("order_status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("required_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("shipped_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("staff_id")
                        .HasColumnType("int");

                    b.Property<int>("store_id")
                        .HasColumnType("int");

                    b.HasKey("order_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("staff_id");

                    b.HasIndex("store_id");

                    b.ToTable("orders", "sales");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("brand_id")
                        .HasColumnType("int");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<int>("list_price")
                        .HasColumnType("int");

                    b.Property<int>("model_year")
                        .HasColumnType("int");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("product_id");

                    b.HasIndex("brand_id");

                    b.HasIndex("category_id");

                    b.ToTable("products", "production");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Staff", b =>
                {
                    b.Property<int>("staff_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("active")
                        .HasColumnType("int");

                    b.Property<int>("email")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("last_name")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("manager_id")
                        .HasColumnType("int");

                    b.Property<int>("phone")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<int>("store_id")
                        .HasColumnType("int");

                    b.HasKey("staff_id");

                    b.HasIndex("manager_id");

                    b.HasIndex("store_id");

                    b.ToTable("staffs", "sales");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Stock", b =>
                {
                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("store_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("product_id", "store_id");

                    b.HasIndex("store_id");

                    b.ToTable("Stocks", "production");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Store", b =>
                {
                    b.Property<int>("store_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("city")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("state")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("store_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("zip_code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("store_id");

                    b.ToTable("stores", "sales");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.order_items", b =>
                {
                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<int>("item_id")
                        .HasColumnType("int");

                    b.Property<float>("discount")
                        .HasColumnType("real");

                    b.Property<float>("list_price")
                        .HasColumnType("real");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("order_id", "item_id");

                    b.HasIndex("product_id");

                    b.ToTable("order_items", "production");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Order", b =>
                {
                    b.HasOne("Ent_DataAnnotation.Model.Customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ent_DataAnnotation.Model.Staff", "staff")
                        .WithMany("orders")
                        .HasForeignKey("staff_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ent_DataAnnotation.Model.Store", "store")
                        .WithMany("orders")
                        .HasForeignKey("store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("staff");

                    b.Navigation("store");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Product", b =>
                {
                    b.HasOne("Ent_DataAnnotation.Model.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("brand_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ent_DataAnnotation.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Staff", b =>
                {
                    b.HasOne("Ent_DataAnnotation.Model.Staff", "staff")
                        .WithMany()
                        .HasForeignKey("manager_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ent_DataAnnotation.Model.Store", "Store")
                        .WithMany("staffs")
                        .HasForeignKey("store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Stock", b =>
                {
                    b.HasOne("Ent_DataAnnotation.Model.Product", "product")
                        .WithMany("stocks")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ent_DataAnnotation.Model.Store", "store")
                        .WithMany("stocks")
                        .HasForeignKey("store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("store");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.order_items", b =>
                {
                    b.HasOne("Ent_DataAnnotation.Model.Order", "order")
                        .WithMany("order_Items")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ent_DataAnnotation.Model.Product", "product")
                        .WithMany("order_Items")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Customer", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Order", b =>
                {
                    b.Navigation("order_Items");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Product", b =>
                {
                    b.Navigation("order_Items");

                    b.Navigation("stocks");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Staff", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("Ent_DataAnnotation.Model.Store", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("staffs");

                    b.Navigation("stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
